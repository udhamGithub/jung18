Dynamic twoDimensional object
#define ROW 2
#define COLUMN 3
#include<iostream>
using namespace std;
//contsnat data storage
//multileval inheritance and virtual function?
//Take middle  leval class pointer[this class dont have virual key word define]
//but it parent have and call another  down layer mf
//crete three thread and do segmenation fault in one
class master
{
	int static count;
public:
	master()
    {
		count++;
		cout<<" Master class constructor called::object count "<<count <<endl;

    }
	void show()
	{
		cout<<"show : Master class"<<endl;
	}

	~ master(){
		count =count-1;
		cout<<" dis  #######Master class Distructure called ::left obj "<<count<<endl;}
};

int master::count =0;

int main()
{
	//for single array
	master *ptr = new master[ROW];
	delete [] ptr;
	//for double array
	master **ptr2 = new master *[ROW];
	//for
	for(int i=0;i<ROW;i++)
	{
		ptr2[i]= new master [COLUMN];
	}
	//clear
	for(int j=0;j<ROW;j++)
	{
		delete [] ptr2[j];
	}
	delete [] ptr2;

	return 0;
}
#if 0
Master class constructor called::object count 1
 Master class constructor called::object count 2
 dis  #######Master class Distructure called ::left obj 1
 dis  #######Master class Distructure called ::left obj 0
 Master class constructor called::object count 1
 Master class constructor called::object count 2
 Master class constructor called::object count 3
 Master class constructor called::object count 4
 Master class constructor called::object count 5
 Master class constructor called::object count 6
 dis  #######Master class Distructure called ::left obj 5
 dis  #######Master class Distructure called ::left obj 4
 dis  #######Master class Distructure called ::left obj 3
 dis  #######Master class Distructure called ::left obj 2
 dis  #######Master class Distructure called ::left obj 1
 dis  #######Master class Distructure called ::left obj 0
#endif

#if 0
The #define directive can be used to create a name for a numerical, character, or string constant,
whereas a const object of any type can be declared.A const object is subject to the scoping rules
for variables, whereas a constant created using #define is not. Unlike a const object, the value of a
macro does not appear in the intermediate source code used by the compiler because they are expanded
inline. The inline expansion makes the macro value unavailable to the debugger.

A macro can be used in a constant expression, such as an array bound, whereas a const object cannot.
(I think we surely need to use macro to define array_size.The compiler does not type-check a macro,
including macro arguments.
#endif



